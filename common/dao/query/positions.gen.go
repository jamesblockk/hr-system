// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"hr-system/common/dao/models"
)

func newPosition(db *gorm.DB, opts ...gen.DOOption) position {
	_position := position{}

	_position.positionDo.UseDB(db, opts...)
	_position.positionDo.UseModel(&models.Position{})

	tableName := _position.positionDo.TableName()
	_position.ALL = field.NewAsterisk(tableName)
	_position.ID = field.NewUint(tableName, "id")
	_position.CreatedAt = field.NewTime(tableName, "created_at")
	_position.UpdatedAt = field.NewTime(tableName, "updated_at")
	_position.DeletedAt = field.NewField(tableName, "deleted_at")
	_position.Title = field.NewString(tableName, "title")
	_position.Level = field.NewString(tableName, "level")
	_position.Employees = positionHasManyEmployees{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Employees", "models.Employee"),
		Department: struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employees.Department", "models.Department"),
			Employees: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employees.Department.Employees", "models.Employee"),
			},
		},
		Position: struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employees.Position", "models.Position"),
			Employees: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employees.Position.Employees", "models.Employee"),
			},
		},
	}

	_position.fillFieldMap()

	return _position
}

type position struct {
	positionDo positionDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Title     field.String
	Level     field.String
	Employees positionHasManyEmployees

	fieldMap map[string]field.Expr
}

func (p position) Table(newTableName string) *position {
	p.positionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p position) As(alias string) *position {
	p.positionDo.DO = *(p.positionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *position) updateTableName(table string) *position {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Title = field.NewString(table, "title")
	p.Level = field.NewString(table, "level")

	p.fillFieldMap()

	return p
}

func (p *position) WithContext(ctx context.Context) IPositionDo { return p.positionDo.WithContext(ctx) }

func (p position) TableName() string { return p.positionDo.TableName() }

func (p position) Alias() string { return p.positionDo.Alias() }

func (p position) Columns(cols ...field.Expr) gen.Columns { return p.positionDo.Columns(cols...) }

func (p *position) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *position) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["title"] = p.Title
	p.fieldMap["level"] = p.Level

}

func (p position) clone(db *gorm.DB) position {
	p.positionDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p position) replaceDB(db *gorm.DB) position {
	p.positionDo.ReplaceDB(db)
	return p
}

type positionHasManyEmployees struct {
	db *gorm.DB

	field.RelationField

	Department struct {
		field.RelationField
		Employees struct {
			field.RelationField
		}
	}
	Position struct {
		field.RelationField
		Employees struct {
			field.RelationField
		}
	}
}

func (a positionHasManyEmployees) Where(conds ...field.Expr) *positionHasManyEmployees {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a positionHasManyEmployees) WithContext(ctx context.Context) *positionHasManyEmployees {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a positionHasManyEmployees) Session(session *gorm.Session) *positionHasManyEmployees {
	a.db = a.db.Session(session)
	return &a
}

func (a positionHasManyEmployees) Model(m *models.Position) *positionHasManyEmployeesTx {
	return &positionHasManyEmployeesTx{a.db.Model(m).Association(a.Name())}
}

type positionHasManyEmployeesTx struct{ tx *gorm.Association }

func (a positionHasManyEmployeesTx) Find() (result []*models.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a positionHasManyEmployeesTx) Append(values ...*models.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a positionHasManyEmployeesTx) Replace(values ...*models.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a positionHasManyEmployeesTx) Delete(values ...*models.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a positionHasManyEmployeesTx) Clear() error {
	return a.tx.Clear()
}

func (a positionHasManyEmployeesTx) Count() int64 {
	return a.tx.Count()
}

type positionDo struct{ gen.DO }

type IPositionDo interface {
	gen.SubQuery
	Debug() IPositionDo
	WithContext(ctx context.Context) IPositionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPositionDo
	WriteDB() IPositionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPositionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPositionDo
	Not(conds ...gen.Condition) IPositionDo
	Or(conds ...gen.Condition) IPositionDo
	Select(conds ...field.Expr) IPositionDo
	Where(conds ...gen.Condition) IPositionDo
	Order(conds ...field.Expr) IPositionDo
	Distinct(cols ...field.Expr) IPositionDo
	Omit(cols ...field.Expr) IPositionDo
	Join(table schema.Tabler, on ...field.Expr) IPositionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPositionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPositionDo
	Group(cols ...field.Expr) IPositionDo
	Having(conds ...gen.Condition) IPositionDo
	Limit(limit int) IPositionDo
	Offset(offset int) IPositionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPositionDo
	Unscoped() IPositionDo
	Create(values ...*models.Position) error
	CreateInBatches(values []*models.Position, batchSize int) error
	Save(values ...*models.Position) error
	First() (*models.Position, error)
	Take() (*models.Position, error)
	Last() (*models.Position, error)
	Find() ([]*models.Position, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Position, err error)
	FindInBatches(result *[]*models.Position, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Position) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPositionDo
	Assign(attrs ...field.AssignExpr) IPositionDo
	Joins(fields ...field.RelationField) IPositionDo
	Preload(fields ...field.RelationField) IPositionDo
	FirstOrInit() (*models.Position, error)
	FirstOrCreate() (*models.Position, error)
	FindByPage(offset int, limit int) (result []*models.Position, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPositionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id uint) (result *models.Position, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (p positionDo) GetByID(id uint) (result *models.Position, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM positions WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p positionDo) Debug() IPositionDo {
	return p.withDO(p.DO.Debug())
}

func (p positionDo) WithContext(ctx context.Context) IPositionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p positionDo) ReadDB() IPositionDo {
	return p.Clauses(dbresolver.Read)
}

func (p positionDo) WriteDB() IPositionDo {
	return p.Clauses(dbresolver.Write)
}

func (p positionDo) Session(config *gorm.Session) IPositionDo {
	return p.withDO(p.DO.Session(config))
}

func (p positionDo) Clauses(conds ...clause.Expression) IPositionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p positionDo) Returning(value interface{}, columns ...string) IPositionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p positionDo) Not(conds ...gen.Condition) IPositionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p positionDo) Or(conds ...gen.Condition) IPositionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p positionDo) Select(conds ...field.Expr) IPositionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p positionDo) Where(conds ...gen.Condition) IPositionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p positionDo) Order(conds ...field.Expr) IPositionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p positionDo) Distinct(cols ...field.Expr) IPositionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p positionDo) Omit(cols ...field.Expr) IPositionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p positionDo) Join(table schema.Tabler, on ...field.Expr) IPositionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p positionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPositionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p positionDo) RightJoin(table schema.Tabler, on ...field.Expr) IPositionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p positionDo) Group(cols ...field.Expr) IPositionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p positionDo) Having(conds ...gen.Condition) IPositionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p positionDo) Limit(limit int) IPositionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p positionDo) Offset(offset int) IPositionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p positionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPositionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p positionDo) Unscoped() IPositionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p positionDo) Create(values ...*models.Position) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p positionDo) CreateInBatches(values []*models.Position, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p positionDo) Save(values ...*models.Position) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p positionDo) First() (*models.Position, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Position), nil
	}
}

func (p positionDo) Take() (*models.Position, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Position), nil
	}
}

func (p positionDo) Last() (*models.Position, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Position), nil
	}
}

func (p positionDo) Find() ([]*models.Position, error) {
	result, err := p.DO.Find()
	return result.([]*models.Position), err
}

func (p positionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Position, err error) {
	buf := make([]*models.Position, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p positionDo) FindInBatches(result *[]*models.Position, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p positionDo) Attrs(attrs ...field.AssignExpr) IPositionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p positionDo) Assign(attrs ...field.AssignExpr) IPositionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p positionDo) Joins(fields ...field.RelationField) IPositionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p positionDo) Preload(fields ...field.RelationField) IPositionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p positionDo) FirstOrInit() (*models.Position, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Position), nil
	}
}

func (p positionDo) FirstOrCreate() (*models.Position, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Position), nil
	}
}

func (p positionDo) FindByPage(offset int, limit int) (result []*models.Position, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p positionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p positionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p positionDo) Delete(models ...*models.Position) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *positionDo) withDO(do gen.Dao) *positionDo {
	p.DO = *do.(*gen.DO)
	return p
}
